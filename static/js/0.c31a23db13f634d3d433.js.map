{"version":3,"sources":["webpack:///./src/utils/commonUtil.js"],"names":["__webpack_require__","d","__webpack_exports__","tableDataMerge","data","rowProps","last","source","forEach","prop","undefined","item","rowSpan","index","console","log"],"mappings":"sDAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAKO,IAAMA,EAAiB,SAACC,EAAMC,GAEnC,IAAIC,KACEC,EAASH,EAoCf,OAlCAC,EAASG,QAAQ,SAAAC,GACfH,EAAKG,QAAQC,IAGfH,EAAOC,QAAQ,SAAAG,GACbA,EAAKC,aAGPL,EAAOC,QAAQ,SAACG,EAAME,GAEpBR,EAASG,QAAQ,SAAAC,GACfE,EAAKC,QAAQH,GAAQ,IAGT,IAAVI,EACFR,EAASG,QAAQ,SAAAC,GACfH,EAAKG,GAAQE,IAOfN,EAASG,QAAQ,SAAAC,GACXE,EAAKF,KAAUH,EAAKG,GAAMA,IAC5BH,EAAKG,GAAMG,QAAQH,IAAS,EAC5BK,QAAQC,IAAIJ,GACZA,EAAKC,QAAQH,GAAQ,GAErBH,EAAKG,GAAQE,MAKdJ","file":"static/js/0.c31a23db13f634d3d433.js","sourcesContent":["/**\r\n *\r\n * @param data 源数据\r\n * @param rowProps 要进行行合并的属性列表\r\n */\r\nexport const tableDataMerge = (data, rowProps) => {\r\n  // last为当有多个需合并的重复值时的首次出现的对象，每个合并字段对应一个对象\r\n  let last = {}\r\n  const source = data\r\n  // 初始化last\r\n  rowProps.forEach(prop => {\r\n    last[prop] = undefined\r\n  })\r\n  // 为源数据的每条记录加上rowSpan属性\r\n  source.forEach(item => {\r\n    item.rowSpan = {}\r\n  })\r\n  // 对源数据进行遍历并计算合并的行数\r\n  source.forEach((item, index) => {\r\n    // 初始化各列的初始化值，默认为1\r\n    rowProps.forEach(prop => {\r\n      item.rowSpan[prop] = 1\r\n    })\r\n    // 当该记录是第一条记录或者合并列的值和上条记录不等时，为last进行更新\r\n    if (index === 0) {\r\n      rowProps.forEach(prop => {\r\n        last[prop] = item\r\n      })\r\n    } else {\r\n      /*\r\n        当前记录和last记录对要合并行的列进行比较\r\n        两者相等 last中的rowSpan对应值+1并同时把当前记录的rowSpan对应值置0,否则以当前记录更新last\r\n      */\r\n      rowProps.forEach(prop => {\r\n        if (item[prop] === last[prop][prop]) {\r\n          last[prop].rowSpan[prop] += 1\r\n          console.log(item)\r\n          item.rowSpan[prop] = 0\r\n        } else {\r\n          last[prop] = item\r\n        }\r\n      })\r\n    }\r\n  })\r\n  return source\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/commonUtil.js"],"sourceRoot":""}